{
  "vulnerabilities": [
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2017-05-17T08:50:05.360000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\n[ch.qos.logback:logback-classic](https://mvnrepository.com/artifact/ch.qos.logback/logback-classic) is a reliable, generic, fast and flexible logging library for Java.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data\nvia the the `SocketServer` and `ServerSocketReceiver` components.\r\n\r\nA configuration can be turned on to allow remote logging through interfaces that accept untrusted serialized data. Authenticated attackers on the adjacent network can exploit this vulnerability to run arbitrary code through the deserialization of custom gadget chains.\n\n## Remediation\n\nUpgrade `ch.qos.logback:logback-classic` to version 1.2.0 or higher.\n\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## References\n\n- [Logback Security Advisory](https://logback.qos.ch/news.html)\n\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5929)\n",
      "disclosureTime": "2017-03-14T06:17:58Z",
      "fixedIn": [
        "1.2.0"
      ],
      "functions": [
        {
          "functionId": {
            "className": "SocketNode",
            "filePath": "ch/qos/logback/classic/net/SocketNode.java",
            "functionName": "run"
          },
          "version": [
            "[0.3,1.2.0)"
          ]
        },
        {
          "functionId": {
            "className": "RemoteAppenderStreamClient",
            "filePath": "ch/qos/logback/classic/net/server/RemoteAppenderStreamClient.java",
            "functionName": "run"
          },
          "version": [
            "[1.0.12,1.2.0)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "ch.qos.logback.classic.net.SocketNode",
            "functionName": "run"
          },
          "version": [
            "[0.3,1.2.0)"
          ]
        },
        {
          "functionId": {
            "className": "ch.qos.logback.classic.net.server.RemoteAppenderStreamClient",
            "functionName": "run"
          },
          "version": [
            "[1.0.12,1.2.0)"
          ]
        }
      ],
      "id": "SNYK-JAVA-CHQOSLOGBACK-31407",
      "identifiers": {
        "CVE": [
          "CVE-2017-5929"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "logback-classic",
        "groupId": "ch.qos.logback"
      },
      "modificationTime": "2019-03-19T14:27:57.375886Z",
      "moduleName": "ch.qos.logback:logback-classic",
      "packageManager": "maven",
      "packageName": "ch.qos.logback:logback-classic",
      "patches": [],
      "publicationTime": "2017-05-21T07:52:36Z",
      "references": [
        {
          "title": "Logback Security Advisory",
          "url": "https://logback.qos.ch/news.html"
        },
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5929"
        }
      ],
      "semver": {
        "vulnerable": [
          "[0.3,1.2.0)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@1.1.1.RELEASE",
        "ch.qos.logback:logback-classic@1.1.2"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@2.0.0.RELEASE",
        "org.springframework.boot:spring-boot-starter@2.0.0.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@2.0.0.RELEASE",
        "ch.qos.logback:logback-classic@1.2.3"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "ch.qos.logback:logback-classic",
      "version": "1.1.2"
    },
    {
      "license": "(EPL-1.0 OR LGPL-2.0)",
      "semver": {
        "vulnerable": [
          "[0.9.18,)"
        ]
      },
      "id": "snyk:lic:maven:ch.qos.logback:logback-classic:(EPL-1.0_OR_LGPL-2.0)",
      "type": "license",
      "packageManager": "maven",
      "language": "java",
      "packageName": "ch.qos.logback:logback-classic",
      "title": "Dual license: EPL-1.0, LGPL-2.0",
      "description": "Dual license: EPL-1.0, LGPL-2.0",
      "publicationTime": "2019-07-30T06:43:06.065Z",
      "creationTime": "2019-07-30T06:43:06.065Z",
      "licenseTemplateUrl": [
        "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
        "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.0.txt"
      ],
      "severity": "medium",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@1.1.1.RELEASE",
        "ch.qos.logback:logback-classic@1.1.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ch.qos.logback:logback-classic",
      "version": "1.1.2"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-05-19T10:19:10.287403Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nWhen Default Typing is enabled for an externally exposed JSON endpoint, the service has the mysql-connector-java jar in the classpath. An attacker can host a crafted MySQL server reachable by the victim and send a crafted JSON message that allows them to read arbitrary local files on the server. This occurs due to missing `com.mysql.cj.jdbc.admin.MiniAdmin` validation.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/dda513bd7251b4f32b7b60b1c13740e3b5a43024)\n\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2326)\n\n- [Github Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.9)\n",
      "disclosureTime": "2019-05-17T18:12:58Z",
      "fixedIn": [
        "2.9.9"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.9)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.9)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-174736",
      "identifiers": {
        "CVE": [
          "CVE-2019-12086"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-05-19T13:08:40.169387Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2019-05-17T18:12:58Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/dda513bd7251b4f32b7b60b1c13740e3b5a43024"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2326"
        },
        {
          "title": "Github Release Tag",
          "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.9"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.9)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.9.9"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2018-01-11T11:41:28.547000Z",
      "credit": [
        "Imre Rad"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507)). This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the Spring libraries are available in the classpath.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to versions 2.8.11, 2.9.4 or higher.\n\n## References\n- [Securityfocus Thread](http://www.securityfocus.com/archive/1/archive/1/541652/100/0/threaded)\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1855)\n- [PoC Project](https://github.com/irsl/jackson-rce-via-spel/)\n",
      "disclosureTime": "2018-01-10T11:41:28.547000Z",
      "fixedIn": [
        "2.8.11",
        "2.9.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043",
      "identifiers": {
        "CVE": [
          "CVE-2017-17485"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-06-23T09:16:49.941472Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2018-01-22T12:30:55.344000Z",
      "references": [
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/1855"
        },
        {
          "title": "PoC Project",
          "url": "https://github.com/irsl/jackson-rce-via-spel/"
        },
        {
          "title": "Securityfocus Thread",
          "url": "http://www.securityfocus.com/archive/1/archive/1/541652/100/0/threaded"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.8.11)",
          "[2.9.0,2.9.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.8.11"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2018-01-22T15:40:18.105000Z",
      "credit": [
        "Rui Chong"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n[`com.fasterxml.jackson.core:jackson-databind`](https://core.jackson.fasterxml.com) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\nAffected versions of the package are vulnerable to Deserialization of Untrusted Data due to an incomplete black list (incomplete fix for [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) and [CVE-2017-17485](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-32043)). This is exploitable via two different gadgets that bypass a blacklist.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\n\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\n\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\n\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\n\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\n- Apache Blog\n\nThe vulnerability, also know as _Mad Gadget_\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\n- Google\n\n## Remediation\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to versions 2.8.11, 2.9.4 or higher.\n\n## References\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1899)\n- [GitHub Commit](https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05)\n",
      "disclosureTime": "2018-01-18T15:40:18.104000Z",
      "fixedIn": [
        "2.8.11",
        "2.9.4"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11)",
            "[2.9,2.9.4)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32044",
      "identifiers": {
        "CVE": [
          "CVE-2018-5968"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-06-23T09:16:52.846842Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2018-01-23T13:17:24.437000Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/GulajavaMinistudio/jackson-databind/pull/92/commits/038b471e2efde2e8f96b4e0be958d3e5a1ff1d05"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/1899"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.8.11)",
          "[2.9.0,2.9.4)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.8.11"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2018-02-26T15:13:40.723000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\r\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\r\n\r\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data. It allows unauthenticated remote code execution because of an incomplete fix for the CVE-2017-7525 deserialization flaw. This is exploitable by sending maliciously crafted JSON input to the readValue method of the ObjectMapper, bypassing a blacklist that is ineffective if the `c3p0` libraries are available in the classpath.\r\n\r\n## Details\r\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n- Apache Blog\r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n- Google\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.8.11.1, 2.9.5 or higher.\r\n\r\n## References\r\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/1931)",
      "disclosureTime": "2018-02-10T15:13:40Z",
      "fixedIn": [
        "2.8.11.1",
        "2.9.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11.1)",
            "[2.9.0,2.9.5)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.8.11.1)",
            "[2.9.0,2.9.5)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-32111",
      "identifiers": {
        "CVE": [
          "CVE-2018-7489"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-01-22T14:48:14.090324Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2018-02-26T15:13:40Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/6799f8f10cc78e9af6d443ed6982d00a13f2e7d2"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/1931"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.8.11.1)",
          "[2.9.0, 2.9.5)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.8.11.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-06-19T15:28:46.421239Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nA Polymorphic Typing issue was discovered in FasterXML jackson-databind 2.x through 2.9.9. When Default Typing is enabled (either globally or for a specific property) for an externally exposed JSON endpoint and the service has JDOM 1.x or 2.x jar in the classpath, an attacker can send a specifically crafted JSON message that allows them to read arbitrary local files on the server.\n\n## Remediation\n\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/5f7c69bba07a7155adde130d9dee2e54a54f1fa5)\n\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2341)\n",
      "disclosureTime": "2019-06-19T14:34:16Z",
      "fixedIn": [
        "2.9.9.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450207",
      "identifiers": {
        "CVE": [
          "CVE-2019-12814"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-07-04T11:07:13.946389Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2019-06-19T14:34:16Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/5f7c69bba07a7155adde130d9dee2e54a54f1fa5"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2341"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.9.1)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.9.9.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-06-25T10:06:54.889582Z",
      "credit": [
        "College of software Nankai University"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data\nwhich allows attackers to have a variety of impacts by leveraging failure to block the `logback-core` class from polymorphic deserialization. Depending on the `classpath` content, remote code execution may be possible.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.1 or higher.\n\n\n## References\n\n- [Debian Lists](https://lists.debian.org/debian-lts-announce/2019/06/msg00019.html)\n\n- [Github Fix](https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java)\n\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2334)\n\n- [Jackson CVEs Don't Panic - Blog](https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062)\n\n- [Release Notes](https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/release-notes/VERSION-2.x)\n",
      "disclosureTime": "2019-05-28T10:27:59Z",
      "fixedIn": [
        "2.9.9.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-450917",
      "identifiers": {
        "CVE": [
          "CVE-2019-12384"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-07-19T11:14:13.742770Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2019-06-25T10:26:29Z",
      "references": [
        {
          "title": "Debian Lists",
          "url": "https://lists.debian.org/debian-lts-announce/2019/06/msg00019.html"
        },
        {
          "title": "Github Fix",
          "url": "https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java"
        },
        {
          "title": "Github Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2334"
        },
        {
          "title": "Jackson CVEs Don't Panic - Blog",
          "url": "https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062"
        },
        {
          "title": "Release Notes",
          "url": "https://github.com/FasterXML/jackson-databind/blob/a6667bcd1f0114f5b004d5203f4139b1e6104a1c/release-notes/VERSION-2.x"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.9.1)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.9.9.1"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-29T14:55:33.030043Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\n`SubTypeValidator.java` mishandles default typing when `ehcache` is used, leading to remote code execution.\n\n## Description\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.9.2 or higher.\n\n\n## References\n\n- [GitHub Diff](https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2)\n\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2387)\n",
      "disclosureTime": "2019-07-29T12:40:42Z",
      "fixedIn": [
        "2.9.9.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-455617",
      "identifiers": {
        "CVE": [
          "CVE-2019-14379",
          "CVE-2019-14439"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-07-29T16:34:36.927084Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2019-07-29T12:40:42Z",
      "references": [
        {
          "title": "GitHub Diff",
          "url": "https://github.com/FasterXML/jackson-databind/compare/jackson-databind-2.9.9.1...jackson-databind-2.9.9.2"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2387"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.9.9.2)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.9.9.2"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:21:07.540945Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 10,
      "description": "## Overview\n \n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nAn attacker could perform a Remote Code Execution attacks via the ` slf4j-ext` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14718`) is not identical to `CVE-2018-12019`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n\n- [Github Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n",
      "disclosureTime": "2018-07-27T17:19:49Z",
      "fixedIn": [
        "2.6.7.2",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72448",
      "identifiers": {
        "CVE": [
          "CVE-2018-14718"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-06-25T14:05:48.448687Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2018-10-11T17:19:41Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
        },
        {
          "title": "Github Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.2)",
          "[2.7.9, 2.7.9.5)",
          "[2.8.0 ,2.8.11.3)",
          "[2.9.0, 2.9.7)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:21:22.141403Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 10,
      "description": "## Overview\n \n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nAn attacker could perform an XML External Entity (XXE) Injection via the `JDK` classes due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14720`) is not identical to `CVE-2018-12018`, `CVE-2018-14729`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n",
      "disclosureTime": "2018-07-27T17:20:17Z",
      "fixedIn": [
        "2.6.7.2",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72449",
      "identifiers": {
        "CVE": [
          "CVE-2018-14720"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-06-25T14:06:11.294846Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2018-10-11T17:19:17Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.2)",
          "[2.7.9, 2.7.9.5)",
          "[2.8.0 ,2.8.11.3)",
          "[2.9.0, 2.9.7)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:23:45.326350Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 10,
      "description": "## Overview\n \n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nAn attacker could perform a Remote Code Execution attack via the `blaze-ds-opt` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14719`) is not identical to `CVE-2018-12018`, `CVE-2018-14720`, `CVE-2018-14721`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n\n- [GitHub Release Notes](https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x)\n",
      "disclosureTime": "2018-07-27T17:22:45Z",
      "fixedIn": [
        "2.6.7.2",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72450",
      "identifiers": {
        "CVE": [
          "CVE-2018-14719"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-06-10T21:41:53.900535Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2018-10-11T17:22:38Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
        },
        {
          "title": "GitHub Release Notes",
          "url": "https://github.com/FasterXML/jackson-databind/blob/a066415d66a6b1a4688ff0ed25695aa3a86ac130/release-notes/VERSION-2.x"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.2)",
          "[2.7.9, 2.7.9.5)",
          "[2.8.0 ,2.8.11.3)",
          "[2.9.0, 2.9.7)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2018-10-11T17:25:40.161831Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 10,
      "description": "## Overview\n \n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nA malicious user could perform a SSRF attack via the `axis2-jaxws` gadget due to an incomplete fix for the [CVE-2017-7525](https://snyk.io/vuln/SNYK-JAVA-COMFASTERXMLJACKSONCORE-31507) deserialization flaw.\r\n\r\n**Note:** This vulnerability (`CVE-2018-14721`) is not identical to `CVE-2018-12018`, `CVE-2018-14719`, `CVE-2018-14720`, `CVE-2018-14722`,`CVE-2018-12023` and `CVE-2018-11307`.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade com.fasterxml.jackson.core:jackson-databind to version 2.6.7.2, 2.7.9.5, 2.8.11.3, 2.9.7 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44)\n\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2097)\n",
      "disclosureTime": "2018-07-27T17:24:46Z",
      "fixedIn": [
        "2.6.7.2",
        "2.7.9.5",
        "2.8.11.3",
        "2.9.7"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[,2.9.7)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72451",
      "identifiers": {
        "CVE": [
          "CVE-2018-14721"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-06-25T14:06:37.859335Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2018-10-11T17:24:39Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/87d29af25e82a249ea15858e2d4ecbf64091db44"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2097"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.6.7.2)",
          "[2.7.9, 2.7.9.5)",
          "[2.8.0 ,2.8.11.3)",
          "[2.9.0, 2.9.7)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.5"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-01-03T14:17:19.256477Z",
      "credit": [
        "Wuguixiong"
      ],
      "cvssScore": 10,
      "description": "## Overview\n\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `jboss-common-core ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19362`) is not identical to `CVE-2018-19360` and `CVE-2018-19361`.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\n\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\n\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\n",
      "disclosureTime": "2019-01-02T19:18:44Z",
      "fixedIn": [
        "2.9.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72882",
      "identifiers": {
        "CVE": [
          "CVE-2018-19362"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-01-03T17:01:51.604674Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2019-01-03T17:01:51.589777Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
        },
        {
          "title": "GitHub Release Tag",
          "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0, 2.9.8)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-01-03T14:17:23.673097Z",
      "credit": [
        "Wuguixiong"
      ],
      "cvssScore": 10,
      "description": "## Overview\n\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19360`) is not identical to `CVE-2018-19362` and `CVE-2018-19361`.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\n\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\n\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\n",
      "disclosureTime": "2019-01-02T19:18:44Z",
      "fixedIn": [
        "2.9.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72883",
      "identifiers": {
        "CVE": [
          "CVE-2018-19360"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-01-03T17:01:51.581795Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2019-01-03T17:01:51.566607Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
        },
        {
          "title": "GitHub Release Tag",
          "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0, 2.9.8)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-01-03T14:17:31.715185Z",
      "credit": [
        "Wuguixiong"
      ],
      "cvssScore": 10,
      "description": "## Overview\n\n[com.fasterxml.jackson.core:jackson-databind](https://github.com/FasterXML/jackson-databind) is a library which contains the general-purpose data-binding functionality and tree-model for Jackson Data Processor.\n\n\nAffected versions of this package are vulnerable to Deserialization of Untrusted Data.\nAn attacker could perform a Remote Code Execution attacks due to not blocking the `axis2-transport-jms ` class from polymorphic deserialization.\r\n\r\n**Note** This vulnerability (`CVE-2018-19361`) is not identical to `CVE-2018-19362` and `CVE-2018-19360`.\n\n## Details\nSerialization is a process of converting an object into a sequence of bytes which can be persisted to a disk or database or can be sent through streams. The reverse process of creating object from sequence of bytes is called deserialization. Serialization is commonly used for communication (sharing objects between multiple hosts) and persistence (store the object state in a file or a database). It is an integral part of popular protocols like _Remote Method Invocation (RMI)_, _Java Management Extension (JMX)_, _Java Messaging System (JMS)_, _Action Message Format (AMF)_, _Java Server Faces (JSF) ViewState_, etc.\r\n\r\n  \r\n\r\n_Deserialization of untrusted data_ ([CWE-502](https://cwe.mitre.org/data/definitions/502.html)), is when the application deserializes untrusted data without sufficiently verifying that the resulting data will be valid, letting the attacker to control the state or the flow of the execution.\r\n\r\n  \r\n\r\nJava deserialization issues have been known for years. However, interest in the issue intensified greatly in 2015, when classes that could be abused to achieve remote code execution were found in a [popular library (Apache Commons Collection)](https://snyk.io/vuln/SNYK-JAVA-COMMONSCOLLECTIONS-30078). These classes were used in zero-days affecting IBM WebSphere, Oracle WebLogic and many other products.\r\n\r\n  \r\n\r\nAn attacker just needs to identify a piece of software that has both a vulnerable class on its path, and performs deserialization on untrusted data. Then all they need to do is send the payload into the deserializer, getting the command executed.\r\n\r\n  \r\n\r\n> Developers put too much trust in Java Object Serialization. Some even de-serialize objects pre-authentication. When deserializing an Object in Java you typically cast it to an expected type, and therefore Java's strict type system will ensure you only get valid object trees. Unfortunately, by the time the type checking happens, platform code has already created and executed significant logic. So, before the final type is checked a lot of code is executed from the readObject() methods of various objects, all of which is out of the developer's control. By combining the readObject() methods of various classes which are available on the classpath of the vulnerable application an attacker can execute functions (including calling Runtime.exec() to execute local OS commands).\r\n\r\n- Apache Blog\r\n\r\n  \r\n\r\nThe vulnerability, also know as _Mad Gadget_\r\n\r\n> Mad Gadget is one of the most pernicious vulnerabilities we’ve seen. By merely existing on the Java classpath, seven “gadget” classes in Apache Commons Collections (versions 3.0, 3.1, 3.2, 3.2.1, and 4.0) make object deserialization for the entire JVM process Turing complete with an exec function. Since many business applications use object deserialization to send messages across the network, it would be like hiring a bank teller who was trained to hand over all the money in the vault if asked to do so politely, and then entrusting that teller with the key. The only thing that would keep a bank safe in such a circumstance is that most people wouldn’t consider asking such a question.\r\n\r\n- Google\n\n## Remediation\n\nUpgrade `com.fasterxml.jackson.core:jackson-databind` to version 2.9.8 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b)\n\n- [GitHub Issue](https://github.com/FasterXML/jackson-databind/issues/2186)\n\n- [GitHub Release Tag](https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8)\n",
      "disclosureTime": "2019-01-02T19:18:43Z",
      "fixedIn": [
        "2.9.8"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ObjectMapper",
            "filePath": "com/fasterxml/jackson/databind/ObjectMapper.java",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.databind.ObjectMapper",
            "functionName": "enableDefaultTyping"
          },
          "version": [
            "[2.0.0, 2.9.8)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-72884",
      "identifiers": {
        "CVE": [
          "CVE-2018-19361"
        ],
        "CWE": [
          "CWE-502"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-databind",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-01-03T17:01:51.558221Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-databind",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-databind",
      "patches": [],
      "publicationTime": "2019-01-03T17:01:51.540041Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/FasterXML/jackson-databind/commit/42912cac4753f3f718ece875e4d486f8264c2f2b"
        },
        {
          "title": "GitHub Issue",
          "url": "https://github.com/FasterXML/jackson-databind/issues/2186"
        },
        {
          "title": "GitHub Release Tag",
          "url": "https://github.com/FasterXML/jackson/wiki/Jackson-Release-2.9.8"
        }
      ],
      "semver": {
        "vulnerable": [
          "[2.0.0, 2.9.8)"
        ]
      },
      "severity": "high",
      "title": "Deserialization of Untrusted Data",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.9.8"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-databind",
      "version": "2.7.9.4"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2017-09-20T15:28:35.195000Z",
      "credit": [
        "Alessio Soldano"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\n[`com.fasterxml.jackson.core:jackson-core`](https://github.com/FasterXML/jackson-core) is a core part of Jackson that defines Streaming API as well as basic shared abstractions.\r\n\r\nAffected versions of this package are vulnerable to Denial of Service attacks. \r\nIf the REST endpoint consumes POST requests with JSON or XML data and data are invalid, the first unrecognized token is printed to server.log\r\n> If the first token is word of length 10MB, the whole word is printed. This is potentially dangerous and can be used to attack the server by filling the disk with logs.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## Remediation\r\nUpgrade `com.fasterxml.jackson.core:jackson-core` to version `2.8.6` or higher.\r\n\r\n## References\r\n- [Github PR](https://github.com/FasterXML/jackson-core/pull/322)\r\n- [Jira Issue](https://issues.jboss.org/browse/JBEAP-6316)",
      "disclosureTime": "2017-01-12T00:00:00Z",
      "fixedIn": [
        "2.8.6"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ReaderBasedJsonParser",
            "filePath": "com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java",
            "functionName": "_reportInvalidToken"
          },
          "version": [
            "[,2.8.6)"
          ]
        },
        {
          "functionId": {
            "className": "UTF8StreamJsonParser",
            "filePath": "com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java",
            "functionName": "_reportInvalidToken"
          },
          "version": [
            "[,2.8.6)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "com.fasterxml.jackson.core.json.ReaderBasedJsonParser",
            "functionName": "_reportInvalidToken"
          },
          "version": [
            "[,2.8.6)"
          ]
        },
        {
          "functionId": {
            "className": "com.fasterxml.jackson.core.json.UTF8StreamJsonParser",
            "functionName": "_reportInvalidToken"
          },
          "version": [
            "[,2.8.6)"
          ]
        }
      ],
      "id": "SNYK-JAVA-COMFASTERXMLJACKSONCORE-31519",
      "identifiers": {
        "CVE": [],
        "CWE": [
          "CWE-399"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "jackson-core",
        "groupId": "com.fasterxml.jackson.core"
      },
      "modificationTime": "2019-02-05T12:29:08.265741Z",
      "moduleName": "com.fasterxml.jackson.core:jackson-core",
      "packageManager": "maven",
      "packageName": "com.fasterxml.jackson.core:jackson-core",
      "patches": [],
      "publicationTime": "2017-09-20T15:28:35Z",
      "references": [
        {
          "title": "Github PR",
          "url": "https://github.com/FasterXML/jackson-core/pull/322"
        },
        {
          "title": "Jira Issue",
          "url": "https://issues.jboss.org/browse/JBEAP-6316"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,2.8.6)"
        ]
      },
      "severity": "medium",
      "title": "Denial of Service (DoS)",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "com.fasterxml.jackson.core:jackson-databind@2.7.9.4",
        "com.fasterxml.jackson.core:jackson-core@2.7.9"
      ],
      "upgradePath": [
        false,
        "com.fasterxml.jackson.core:jackson-databind@2.8.6",
        "com.fasterxml.jackson.core:jackson-core@2.8.6"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "com.fasterxml.jackson.core:jackson-core",
      "version": "2.7.9"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.645000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nApache Tomcat 6.x before 6.0.44, 7.x before 7.0.55, and 8.x before 8.0.9 does not properly handle cases where an HTTP response occurs before finishing the reading of an entire request body, which allows remote attackers to cause a denial of service (thread consumption) via a series of aborted upload attempts.\r\n\r\n## Details\r\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0230)",
      "disclosureTime": "2015-05-11T20:57:49Z",
      "fixedIn": [
        "7.0.55",
        "8.0.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30982",
      "identifiers": {
        "CVE": [
          "CVE-2014-0230"
        ],
        "CWE": [
          "CWE-399"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-25T09:54:58.159904Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2015-05-11T20:57:49Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0230"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.55)",
          "[8.0.0-RC1,8.0.9)"
        ]
      },
      "severity": "high",
      "title": "Denial of Service (DoS)",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.6.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.6.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.55"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.665000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nThe Expression Language (EL) implementation in Apache Tomcat 6.x before 6.0.44, 7.x before 7.0.58, and 8.x before 8.0.16 does not properly consider the possibility of an accessible interface implemented by an inaccessible class, which allows attackers to bypass a SecurityManager protection mechanism via a web application that leverages use of incorrect privileges during EL evaluation.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-7810)",
      "disclosureTime": "2015-05-14T21:09:38Z",
      "fixedIn": [
        "7.0.58",
        "8.0.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30983",
      "identifiers": {
        "CVE": [
          "CVE-2014-7810"
        ],
        "CWE": [
          "CWE-284"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-25T10:02:51.648446Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2015-05-14T21:09:38Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-7810"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.58)",
          "[8.0.0-RC1,8.0.16)"
        ]
      },
      "severity": "medium",
      "title": "Improper Access Control",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.11.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.11.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.59"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.684000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nThe Mapper component in Apache Tomcat 6.x before 6.0.45, 7.x before 7.0.68, 8.x before 8.0.30, and 9.x before 9.0.0.M2 processes redirects before considering security constraints and Filters, which allows remote attackers to determine the existence of a directory via a URL that lacks a trailing / (slash) character.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5345)",
      "disclosureTime": "2016-02-22T12:26:55Z",
      "fixedIn": [
        "7.0.68",
        "8.0.30",
        "9.0.0.M2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30984",
      "identifiers": {
        "CVE": [
          "CVE-2015-5345"
        ],
        "CWE": [
          "CWE-22"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-25T09:56:04.197306Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-02-22T12:26:55Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5345"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.68)",
          "[8.0.0-RC1,8.0.30)",
          "[9.0.0.M1,9.0.0.M2)"
        ]
      },
      "severity": "medium",
      "title": "Directory Traversal",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.2.8.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.2.8.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.705000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nSession fixation vulnerability in Apache Tomcat 7.x before 7.0.66, 8.x before 8.0.30, and 9.x before 9.0.0.M2, when different session settings are used for deployments of multiple versions of the same web application, might allow remote attackers to hijack web sessions by leveraging use of a requestedSessionSSL field for an unintended request, related to CoyoteAdapter.java and Request.java.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5346)",
      "disclosureTime": "2016-02-22T13:38:47Z",
      "fixedIn": [
        "7.0.66",
        "8.0.30",
        "9.0.0.M2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30985",
      "identifiers": {
        "CVE": [
          "CVE-2015-5346"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-25T10:01:31.752239Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-02-22T13:38:47Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5346"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.66)",
          "[8.0.0-RC1,8.0.30)",
          "[9.0.0.M1,9.0.0.M2)"
        ]
      },
      "severity": "high",
      "title": "Information Disclosure",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.2.8.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.2.8.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.30"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.724000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nApache Tomcat 6.x before 6.0.45, 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M2 does not place org.apache.catalina.manager.StatusManagerServlet on the org/apache/catalina/core/RestrictedServlets.properties list, which allows remote authenticated users to bypass intended SecurityManager restrictions and read arbitrary HTTP requests, and consequently discover session ID values, via a crafted web application.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0706)",
      "disclosureTime": "2016-02-22T13:00:27Z",
      "fixedIn": [
        "7.0.68",
        "8.0.32",
        "9.0.0.M3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30986",
      "identifiers": {
        "CVE": [
          "CVE-2016-0706"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-27T15:49:47.819652Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-02-22T13:00:27Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0706"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.68)",
          "[8.0.0-RC1,8.0.32)",
          "[9.0.0.M1,9.0.0.M3)"
        ]
      },
      "severity": "medium",
      "title": "Information Exposure",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.3.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.3.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.744000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.8,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nThe session-persistence implementation in Apache Tomcat 6.x before 6.0.45, 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M2 mishandles session attributes, which allows remote authenticated users to bypass intended SecurityManager restrictions and execute arbitrary code in a privileged context via a web application that places a crafted object in a session.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0714)",
      "disclosureTime": "2016-02-22T12:46:24Z",
      "fixedIn": [
        "7.0.68",
        "8.0.32",
        "9.0.0.M3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30987",
      "identifiers": {
        "CVE": [
          "CVE-2016-0714"
        ],
        "CWE": [
          "CWE-264"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-27T15:49:05.459318Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-02-22T12:46:24Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0714"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.68)",
          "[8.0.0-RC1,8.0.32)",
          "[9.0.0.M1,9.0.0.M3)"
        ]
      },
      "severity": "high",
      "title": "Access Restriction Bypass",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.3.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.3.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.764000Z",
      "credit": [
        "The Apache Tomcat Security Team"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nAffected versions of the package are vulnerable to Timing Attack. The `setGlobalContext` method in `ResourceLinkFactory.java` does not consider whether callers to this method are authorized, which allows remote authenticated users to bypass intended SecurityManager restrictions and read or write to arbitrary application data, or cause a denial of service (application disruption), via a web application that sets a crafted global context.\r\n\r\n## References\r\n- [OSS Security](http://www.openwall.com/lists/oss-security/2016/10/27/8)",
      "disclosureTime": "2016-10-28T04:54:04Z",
      "fixedIn": [
        "7.0.72",
        "8.0.37",
        "8.5.5",
        "9.0.0.M10"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30988",
      "identifiers": {
        "CVE": [
          "CVE-2016-0762"
        ],
        "CWE": [
          "CWE-264"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-25T09:59:51.248514Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-10-28T04:54:04Z",
      "references": [
        {
          "title": "OSS Security",
          "url": "http://www.openwall.com/lists/oss-security/2016/10/27/8"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.72)",
          "[8.0.0-RC1,8.0.37)",
          "[8.5.0,8.5.5)",
          "[9.0.0.M1,9.0.0.M10)"
        ]
      },
      "severity": "medium",
      "title": "Timing Attack",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.8.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.8.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.37"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.778000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.3,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22)\r\nThe setGlobalContext method in org/apache/naming/factory/ResourceLinkFactory.java in Apache Tomcat 7.x before 7.0.68, 8.x before 8.0.31, and 9.x before 9.0.0.M3 does not consider whether ResourceLinkFactory.setGlobalContext callers are authorized, which allows remote authenticated users to bypass intended SecurityManager restrictions and read or write to arbitrary application data, or cause a denial of service (application disruption), via a web application that sets a crafted global context.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0763)",
      "disclosureTime": "2016-02-22T12:01:26Z",
      "fixedIn": [
        "7.0.68",
        "8.0.32",
        "9.0.0.M3"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30989",
      "identifiers": {
        "CVE": [
          "CVE-2016-0763"
        ],
        "CWE": [
          "CWE-264"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-27T15:50:26.361734Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-02-22T12:01:26Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2016-0763"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.68)",
          "[8.0.0-RC1,8.0.32)",
          "[9.0.0.M1,9.0.0.M3)"
        ]
      },
      "severity": "medium",
      "title": "Access Restriction Bypass",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.3.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.3.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2017-05-17T12:10:22.577000Z",
      "credit": [
        "Tomcat Security Team"
      ],
      "cvssScore": 9.1,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22) is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies.\r\n\r\nAffected versions of this package are vulnerable to Information Disclosure. While investigating bug 60718, it was noticed that some calls to application listeners, It did not use the appropriate facade object. When running an untrusted application under a SecurityManager, it was therefore possible for that untrusted application to retain a reference to the request or response object and thereby access and/or modify information associated with another web application.\r\n\r\n## Remediation\r\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.76, 8.0.42, 8.5.12, 9.0.0.M17 or higher..\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5648)\r\n- [Apache Mailing List](https://lists.apache.org/thread.html/d0e00f2e147a9e9b13a6829133092f349b2882bf6860397368a52600@%3Cannounce.tomcat.apache.org%3E)",
      "disclosureTime": "2017-04-11T02:17:12Z",
      "fixedIn": [
        "7.0.76",
        "8.0.42",
        "8.5.12",
        "9.0.0.M17"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-31420",
      "identifiers": {
        "CVE": [
          "CVE-2017-5648"
        ],
        "CWE": [
          "CWE-284"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-25T09:59:01.066862Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2017-05-21T07:52:38Z",
      "references": [
        {
          "title": "Apache Mailing List",
          "url": "https://lists.apache.org/thread.html/d0e00f2e147a9e9b13a6829133092f349b2882bf6860397368a52600@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5648"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.76)",
          "[8.0.0-RC1,8.0.42)",
          "[8.5.0,8.5.12)",
          "[9.0.0.M1,9.0.0.M17)"
        ]
      },
      "severity": "high",
      "title": "Information Disclosure",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.6.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.6.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.13"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2017-05-17T12:10:22.669000Z",
      "credit": [
        "Tomcat Security Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\r\n[`org.apache.tomcat.embed:tomcat-embed-core`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-core%22) is an open source implementation of the Java Servlet, JavaServer Pages, Java Expression Language and Java WebSocket technologies.\r\n\r\nAffected versions of this package are vulnerable to Information Disclosure. A bug in the handling of the pipelined requests, when send file was used, results in the pipelined request being lost when send file processing of the previous request completed. This could result in responses appearing to be sent for the wrong request. For example, a user agent that sent requests A, B and C could see the correct response for request A, the response for request C for request B and no response for request C.\r\n\r\n## Remediation\r\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.77, 8.0.43, 8.5.13, 9.0.0.M19 or higher.\r\n\r\n## References\r\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5647)\r\n- [Apache Mailing Lists](https://lists.apache.org/thread.html/5796678c5a773c6f3ff57c178ac247d85ceca0dee9190ba48171451a@%3Cusers.tomcat.apache.org%3E)",
      "disclosureTime": "2017-04-11T05:42:07Z",
      "fixedIn": [
        "7.0.77",
        "8.0.43",
        "8.5.13",
        "9.0.0.M19"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-31432",
      "identifiers": {
        "CVE": [
          "CVE-2017-5647"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-25T09:58:09.367202Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2017-05-21T07:52:38Z",
      "references": [
        {
          "title": "Apache Mailing Lists",
          "url": "https://lists.apache.org/thread.html/5796678c5a773c6f3ff57c178ac247d85ceca0dee9190ba48171451a@%3Cusers.tomcat.apache.org%3E"
        },
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2017-5647"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.77)",
          "[8.0.0-RC1,8.0.43)",
          "[8.5.0,8.5.13)",
          "[9.0.0.M1,9.0.0.M19)"
        ]
      },
      "severity": "high",
      "title": "Information Disclosure",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.6.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.6.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.13"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:F/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-07-02T11:18:18.168014Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Remote Code Execution\ndue to a bug in the way the underlying Java Runtime Environment (JRE) passes command line arguments to windows systems when the option `enableCmdLineArguments` is enabled.\r\n\r\nThe CGI Servlet in Apache Tomcat when enabled, will pass user input to the underlying operating system for command line parsing. However, this process is not consistent and may allow the injection of additional arguments. This misconfiguration could be abused by attackers to execute code on an application's underlying operating system.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.94, 8.5.40, 9.0.19 or higher.\n\n\n## References\n\n- [CodeWhite Security Blog](https://codewhitesec.blogspot.com/2016/02/java-and-command-line-injections-in-windows.html)\n\n- [Exploit - ExploitDB](https://exploit-db.com/exploits/47073)\n\n- [Tomcat Security Advisory #7](https://tomcat.apache.org/security-7.html#Fixed_in_Apache_Tomcat_7.0.94)\n\n- [Tomcat Security Advisory #8](https://tomcat.apache.org/security-8.html#Fixed_in_Apache_Tomcat_8.5.40)\n\n- [Tomcat Security Advisory #9](https://tomcat.apache.org/security-9.html#Fixed_in_Apache_Tomcat_9.0.19)\n",
      "disclosureTime": "2019-04-15T11:47:05Z",
      "fixedIn": [
        "7.0.94",
        "8.5.40",
        "9.0.19"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451343",
      "identifiers": {
        "CVE": [
          "CVE-2019-0232"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-02T11:18:33.220414Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2019-04-17T11:46:33Z",
      "references": [
        {
          "title": "CodeWhite Security Blog",
          "url": "https://codewhitesec.blogspot.com/2016/02/java-and-command-line-injections-in-windows.html"
        },
        {
          "title": "Exploit - ExploitDB",
          "url": "https://exploit-db.com/exploits/47073"
        },
        {
          "title": "Tomcat Security Advisory #7",
          "url": "https://tomcat.apache.org/security-7.html%23Fixed_in_Apache_Tomcat_7.0.94"
        },
        {
          "title": "Tomcat Security Advisory #8",
          "url": "https://tomcat.apache.org/security-8.html%23Fixed_in_Apache_Tomcat_8.5.40"
        },
        {
          "title": "Tomcat Security Advisory #9",
          "url": "https://tomcat.apache.org/security-9.html%23Fixed_in_Apache_Tomcat_9.0.19"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.94)",
          "[8.5.0,8.5.40)",
          "[9.0.0.M1,9.0.19)"
        ]
      },
      "severity": "high",
      "title": "Remote Code Execution",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.2.0.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.2.0.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.15"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-03T08:26:23.558091Z",
      "credit": [
        "Nightwatch Cybersecurity Research"
      ],
      "cvssScore": 3.5,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Cross-site Scripting (XSS)\nvia the SSI `printenv` command. \r\n\r\nNote: Server Side Includes (SSI) is disabled by default and is intended for debugging purposes only.\n\n## Details\nA cross-site scripting attack occurs when the attacker tricks a legitimate web-based application or site to accept a request as originating from a trusted source.\r\n\r\nThis is done by escaping the context of the web application; the web application then delivers that data to its users along with other trusted dynamic content, without validating it. The browser unknowingly executes malicious script on the client side (through client-side languages; usually JavaScript or HTML)  in order to perform actions that are otherwise typically blocked by the browser’s Same Origin Policy.\r\n\r\nֿInjecting malicious code is the most prevalent manner by which XSS is exploited; for this reason, escaping characters in order to prevent this manipulation is the top method for securing code against this vulnerability.\r\n\r\nEscaping means that the application is coded to mark key characters, and particularly key characters included in user input, to prevent those characters from being interpreted in a dangerous context. For example, in HTML, `<` can be coded as  `&lt`; and `>` can be coded as `&gt`; in order to be interpreted and displayed as themselves in text, while within the code itself, they are used for HTML tags. If malicious content is injected into an application that escapes special characters and that malicious content uses `<` and `>` as HTML tags, those characters are nonetheless not interpreted as HTML tags by the browser if they’ve been correctly escaped in the application code and in this way the attempted attack is diverted.\r\n \r\nThe most prominent use of XSS is to steal cookies (source: OWASP HttpOnly) and hijack user sessions, but XSS exploits have been used to expose sensitive information, enable access to privileged services and functionality and deliver malware. \r\n\r\n### Types of attacks\r\nThere are a few methods by which XSS can be manipulated:\r\n\r\n|Type|Origin|Description|\r\n|--|--|--|\r\n|**Stored**|Server|The malicious code is inserted in the application (usually as a link) by the attacker. The code is activated every time a user clicks the link.|\r\n|**Reflected**|Server|The attacker delivers a malicious link externally from the vulnerable web site application to a user. When clicked, malicious code is sent to the vulnerable web site, which reflects the attack back to the user’s browser.| \r\n|**DOM-based**|Client|The attacker forces the user’s browser to render a malicious page. The data in the page itself delivers the cross-site scripting data.|\r\n|**Mutated**| |The attacker injects code that appears safe, but is then rewritten and modified by the browser, while parsing the markup. An example is rebalancing unclosed quotation marks or even adding quotation marks to unquoted parameters.|\r\n\r\n### Affected environments\r\nThe following environments are susceptible to an XSS attack:\r\n\r\n* Web servers\r\n* Application servers\r\n* Web application environments\r\n\r\n### How to prevent\r\nThis section describes the top best practices designed to specifically protect your code: \r\n\r\n* Sanitize data input in an HTTP request before reflecting it back, ensuring all data is validated, filtered or escaped before echoing anything back to the user, such as the values of query parameters during searches. \r\n* Convert special characters such as `?`, `&`, `/`, `<`, `>` and spaces to their respective HTML or URL encoded equivalents. \r\n* Give users the option to disable client-side scripts.\r\n* Redirect invalid requests.\r\n* Detect simultaneous logins, including those from two separate IP addresses, and invalidate those sessions.\r\n* Use and enforce a Content Security Policy (source: Wikipedia) to disable any features that might be manipulated for an XSS attack.\r\n* Read the documentation for any of the libraries referenced in your code to understand which elements allow for embedded HTML.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.18, 8.5.40, 7.0.94 or higher.\n\n\n## References\n\n- [Apache Mail Archives](https://lists.apache.org/thread.html/6e6e9eacf7b28fd63d249711e9d3ccd4e0a83f556e324aee37be5a8c@%3Cannounce.tomcat.apache.org%3E)\n",
      "disclosureTime": "2019-05-17T22:45:19Z",
      "fixedIn": [
        "9.0.18",
        "8.5.40",
        "7.0.94"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451458",
      "identifiers": {
        "CVE": [
          "CVE-2019-0221"
        ],
        "CWE": [
          "CWE-79"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-03T08:26:23.558118Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2019-05-28T22:45:19Z",
      "references": [
        {
          "title": "Apache Mail Archives",
          "url": "https://lists.apache.org/thread.html/6e6e9eacf7b28fd63d249711e9d3ccd4e0a83f556e324aee37be5a8c@%3Cannounce.tomcat.apache.org%3E"
        }
      ],
      "semver": {
        "vulnerable": [
          "[9.0.0.M1, 9.0.18)",
          "[8.5.0, 8.5.40)",
          "[7.0.0, 7.0.94)"
        ]
      },
      "severity": "low",
      "title": "Cross-site Scripting (XSS)",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.2.0.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.2.0.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.15"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2019-07-04T08:10:13.992534Z",
      "credit": [
        "Sergey Bobrov"
      ],
      "cvssScore": 5.6,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Open Redirect.\nWhen the default servlet returned a redirect to a directory (e.g. redirecting to '/foo/' when the user requested '/foo') a specially crafted URL could be used to cause the redirect to be generated to any URI of the attackers choice.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.91, 8.5.34, 9.0.12 or higher.\n\n\n## References\n\n- [Apache Mail Archive](https://lists.apache.org/thread.html/23134c9b5a23892a205dc140cdd8c9c0add233600f76b313dda6bd75@%3Cannounce.tomcat.apache.org%3E)\n\n- [Tomcat Security Advisory](http://tomcat.apache.org/security-9.html)\n",
      "disclosureTime": "2018-10-03T13:13:41Z",
      "fixedIn": [
        "7.0.91",
        "8.5.34",
        "9.0.12"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451503",
      "identifiers": {
        "CVE": [
          "CVE-2018-11784"
        ],
        "CWE": [
          "CWE-601"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T08:10:13.992572Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2018-10-09T15:31:59Z",
      "references": [
        {
          "title": "Apache Mail Archive",
          "url": "https://lists.apache.org/thread.html/23134c9b5a23892a205dc140cdd8c9c0add233600f76b313dda6bd75@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "Tomcat Security Advisory",
          "url": "http://tomcat.apache.org/security-9.html"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.23, 7.0.91)",
          "[8.5.0, 8.5.34)",
          "[9.0.0, 9.0.12)"
        ]
      },
      "severity": "medium",
      "title": "Open Redirect",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.2.0.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.2.0.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.15"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-04T08:15:25.869413Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 9.8,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Insecure Defaults.\nThe defaults settings for the `CORS` filter are insecure and enable `supportsCredentials` for all origins.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.89, 8.0.53, 8.5.32, 9.0.9 or higher.\n\n\n## References\n\n- [Apache Mail Archives](https://lists.apache.org/thread.html/fbfb713e4f8a4c0f81089b89450828011343593800cae3fb629192b1@%3Cannounce.tomcat.apache.org%3E)\n\n- [Apache Tomcat Security-7](http://tomcat.apache.org/security-7.html)\n\n- [Apache Tomcat Security-8](http://tomcat.apache.org/security-8.html)\n\n- [Apache Tomcat Security-9](http://tomcat.apache.org/security-9.html)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-8014)\n",
      "disclosureTime": "2018-05-16T16:56:14Z",
      "fixedIn": [
        "7.0.89",
        "8.0.53",
        "8.5.32",
        "9.0.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451505",
      "identifiers": {
        "CVE": [
          "CVE-2018-8014"
        ],
        "CWE": [
          "CWE-453"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T08:15:25.869445Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2018-05-21T08:32:28Z",
      "references": [
        {
          "title": "Apache Mail Archives",
          "url": "https://lists.apache.org/thread.html/fbfb713e4f8a4c0f81089b89450828011343593800cae3fb629192b1@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "Apache Tomcat Security-7",
          "url": "http://tomcat.apache.org/security-7.html"
        },
        {
          "title": "Apache Tomcat Security-8",
          "url": "http://tomcat.apache.org/security-8.html"
        },
        {
          "title": "Apache Tomcat Security-9",
          "url": "http://tomcat.apache.org/security-9.html"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-8014"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,7.0.89)",
          "[8.0.0, 8.0.53)",
          "[8.5.0, 8.5.32)",
          "[9.0.0, 9.0.9)"
        ]
      },
      "severity": "high",
      "title": "Insecure Defaults",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.15.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.15.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-04T08:19:34.840671Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS)\nvia the UTF-8 decoder. When handling some special characters, the decoder may enter an infinite loop, thus denying service to other requests.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.90, 8.0.52, 8.5.32, 9.0.10 or higher.\n\n\n## References\n\n- [AlphaBot Security Blog](https://www.alphabot.com/security/blog/2018/java/Apache-Tomcat-user-session-mix-up-and-DoS.html#no-host-name-verification-in-websocket-client)\n\n- [Apache Tomcat Release 7](https://tomcat.apache.org/security-7.html)\n\n- [Apache Tomcat Release 8](https://tomcat.apache.org/security-8.html)\n\n- [Apache Tomcat Release 9](https://tomcat.apache.org/security-9.html)\n\n- [RedHat Bugzilla Bug](https://bugzilla.redhat.com/show_bug.cgi?id=1607591)\n",
      "disclosureTime": "2018-07-22T00:00:00Z",
      "fixedIn": [
        "7.0.90",
        "8.0.52",
        "8.5.32",
        "9.0.10"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451508",
      "identifiers": {
        "CVE": [
          "CVE-2018-1336"
        ],
        "CWE": [
          "CWE-400"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T08:22:42.134035Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2018-07-24T15:14:13Z",
      "references": [
        {
          "title": "AlphaBot Security Blog",
          "url": "https://www.alphabot.com/security/blog/2018/java/Apache-Tomcat-user-session-mix-up-and-DoS.html%23no-host-name-verification-in-websocket-client"
        },
        {
          "title": "Apache Tomcat Release 7",
          "url": "https://tomcat.apache.org/security-7.html"
        },
        {
          "title": "Apache Tomcat Release 8",
          "url": "https://tomcat.apache.org/security-8.html"
        },
        {
          "title": "Apache Tomcat Release 9",
          "url": "https://tomcat.apache.org/security-9.html"
        },
        {
          "title": "RedHat Bugzilla Bug",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1607591"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,7.0.90)",
          "[8.0.0, 8.0.52)",
          "[8.5.0, 8.5.32)",
          "[9.0.0, 9.0.10)"
        ]
      },
      "severity": "high",
      "title": "Denial of Service (DoS)",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.15.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.15.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.32"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T10:50:12.298111Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Directory Traversal.\nSecurity constraints defined by annotations of Servlets were only applied once a Servlet had been loaded. Because security constraints defined in this way apply to the URL pattern and any URLs below that point, it was possible - depending on the order Servlets were loaded - for some security constraints not to be applied. This could have exposed resources to users who were not authorised to access them.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 9.0.5, 8.5.28, 8.0.50, 7.0.85 or higher.\n\n\n## References\n\n- [Apache Mail Archives](https://lists.apache.org/thread.html/d3354bb0a4eda4acc0a66f3eb24a213fdb75d12c7d16060b23e65781@%3Cannounce.tomcat.apache.org%3E)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-1305)\n",
      "disclosureTime": "2018-02-23T23:03:15Z",
      "fixedIn": [
        "9.0.5",
        "8.5.28",
        "8.0.50",
        "7.0.85"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451510",
      "identifiers": {
        "CVE": [
          "CVE-2018-1305"
        ],
        "CWE": [
          "CWE-22"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T10:54:43.616553Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2018-02-25T14:35:15Z",
      "references": [
        {
          "title": "Apache Mail Archives",
          "url": "https://lists.apache.org/thread.html/d3354bb0a4eda4acc0a66f3eb24a213fdb75d12c7d16060b23e65781@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-1305"
        }
      ],
      "semver": {
        "vulnerable": [
          "[9.0.0M1,9.0.5)",
          "[8.5.0,8.5.28)",
          "[8.0.0RC1,8.0.50)",
          "[7.0.0,7.0.85)"
        ]
      },
      "severity": "medium",
      "title": "Directory Traversal",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.11.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.11.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.29"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T10:55:56.632126Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Access Restriction Bypass.\nThe URL pattern of  (the empty string) which exactly maps to the context root was not correctly handled, this caused the constraint to be ignored. It was, therefore, possible for unauthorised users to gain access to web application resources that should have been protected. Only security constraints with a URL pattern of the empty string were affected.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.85, 8.0.50, 8.5.28, 9.0.5 or higher.\n\n\n## References\n\n- [Apache Mail Archives](https://lists.apache.org/thread.html/b1d7e2425d6fd2cebed40d318f9365b44546077e10949b01b1f8a0fb@%3Cannounce.tomcat.apache.org%3E)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-1304)\n\n- [Security Tracker](https://www.securitytracker.com/id/1040427)\n",
      "disclosureTime": "2018-02-23T12:40:11Z",
      "fixedIn": [
        "7.0.85",
        "8.0.50",
        "8.5.28",
        "9.0.5"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451511",
      "identifiers": {
        "CVE": [
          "CVE-2018-1304"
        ],
        "CWE": [
          "CWE-284"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T10:56:15.351249Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2018-03-05T17:08:07Z",
      "references": [
        {
          "title": "Apache Mail Archives",
          "url": "https://lists.apache.org/thread.html/b1d7e2425d6fd2cebed40d318f9365b44546077e10949b01b1f8a0fb@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-1304"
        },
        {
          "title": "Security Tracker",
          "url": "https://www.securitytracker.com/id/1040427"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.85)",
          "[8.0.0.RC1,8.0.50)",
          "[8.5.0,8.5.28)",
          "[9.0.0.M1,9.0.5)"
        ]
      },
      "severity": "medium",
      "title": "Access Restriction Bypass",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.11.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.11.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.29"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H/E:H/RL:O/RC:C",
      "alternativeIds": [],
      "creationTime": "2019-07-04T11:08:09.902704Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 8.1,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Arbitrary Code Execution.\nWhen running Apache Tomcat versions 9.0.0.M1 to 9.0.0, 8.5.0 to 8.5.22, 8.0.0.RC1 to 8.0.46 and 7.0.0 to 7.0.81 with HTTP PUTs enabled (e.g. via setting the readonly initialisation parameter of the Default servlet to false) it was possible to upload a JSP file to the server via a specially crafted request. This JSP could then be requested and any code it contained would be executed by the server.\r\n\r\nThis is due to an incomplete fix for [CVE-2017-12615](https://snyk.io/vuln/SNYK-JAVA-ORGAPACHETOMCAT-31534).\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.82, 8.0.46, 8.5.22, 9.0.1 or higher.\n\n\n## References\n\n- [Apache Mailing List](https://lists.apache.org/thread.html/3fd341a604c4e9eab39e7eaabbbac39c30101a022acc11dd09d7ebcb@%3Cannounce.tomcat.apache.org%3E)\n\n- [Apache Security Bulletin](http://tomcat.apache.org/security-8.html)\n\n- [Apache Tomcat Bugzilla](https://bz.apache.org/bugzilla/show_bug.cgi?id=61542)\n\n- [Exploit - ExploitDB 1](https://exploit-db.com/exploits/43008)\n\n- [Exploit - ExploitDB 2](https://www.exploit-db.com/exploits/42966)\n\n- [GitHub Changelog](https://github.com/apache/tomcat/blob/52a2f5ba1eb954c93d52897b25d3599bda271f88/webapps/docs/changelog.xml#L51)\n\n- [PoC by cyberheartmi9](https://github.com/cyberheartmi9/CVE-2017-12617)\n\n- [RedHat Security Bulletin](https://access.redhat.com/security/cve/cve-2017-12617)\n",
      "disclosureTime": "2017-09-21T21:00:00Z",
      "fixedIn": [
        "7.0.82",
        "8.0.46",
        "8.5.22",
        "9.0.1"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451515",
      "identifiers": {
        "CVE": [
          "CVE-2017-12617"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T11:08:09.902734Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2017-10-11T09:30:20Z",
      "references": [
        {
          "title": "Apache Mailing List",
          "url": "https://lists.apache.org/thread.html/3fd341a604c4e9eab39e7eaabbbac39c30101a022acc11dd09d7ebcb@%3Cannounce.tomcat.apache.org%3E"
        },
        {
          "title": "Apache Security Bulletin",
          "url": "http://tomcat.apache.org/security-8.html"
        },
        {
          "title": "Apache Tomcat Bugzilla",
          "url": "https://bz.apache.org/bugzilla/show_bug.cgi?id=61542"
        },
        {
          "title": "Exploit - ExploitDB 1",
          "url": "https://exploit-db.com/exploits/43008"
        },
        {
          "title": "Exploit - ExploitDB 2",
          "url": "https://www.exploit-db.com/exploits/42966"
        },
        {
          "title": "GitHub Changelog",
          "url": "https://github.com/apache/tomcat/blob/52a2f5ba1eb954c93d52897b25d3599bda271f88/webapps/docs/changelog.xml%23L51"
        },
        {
          "title": "PoC by cyberheartmi9",
          "url": "https://github.com/cyberheartmi9/CVE-2017-12617"
        },
        {
          "title": "RedHat Security Bulletin",
          "url": "https://access.redhat.com/security/cve/cve-2017-12617"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,7.0.82)",
          "[8,8.0.46)",
          "[8.5,8.5.22)",
          "[9,9.0.1)"
        ]
      },
      "severity": "high",
      "title": "Arbitrary Code Execution",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.5.8.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.5.8.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.23"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T11:32:22.954538Z",
      "credit": [
        "Aniket Nandkishor Kulkarni"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Access Restriction Bypass.\nThe error page mechanism of the Java Servlet Specification requires that, when an error occurs and an error page is configured for the error that occurred, the original request and response are forwarded to the error page. This means that the request is presented to the error page with the original HTTP method. If the error page is a static file, expected behaviour is to serve content of the file as if processing a GET request, regardless of the actual HTTP method. The Default Servlet in Apache Tomcat 9.0.0.M1 to 9.0.0.M20, 8.5.0 to 8.5.14, 8.0.0.RC1 to 8.0.43 and 7.0.0 to 7.0.77 did not do this. Depending on the original request this could lead to unexpected and undesirable results for static error pages including, if the DefaultServlet is configured to permit writes, the replacement or removal of the custom error page. Notes for other user provided error pages: (1) Unless explicitly coded otherwise, JSPs ignore the HTTP method. JSPs used as error pages must must ensure that they handle any error dispatch as a GET request, regardless of the actual method. (2) By default, the response generated by a Servlet does depend on the HTTP method. Custom Servlets used as error pages must ensure that they handle any error dispatch as a GET request, regardless of the actual method.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.78, 8.0.44, 8.5.15, 9.0.0.M21 or higher.\n\n\n## References\n\n- [Bugzilla redhat](https://bugzilla.redhat.com/show_bug.cgi?id&#x3D;1459158)\n\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2017-5664)\n",
      "disclosureTime": "2017-05-01T21:00:00Z",
      "fixedIn": [
        "7.0.78",
        "8.0.44",
        "8.5.15",
        "9.0.0.M21"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451519",
      "identifiers": {
        "CVE": [
          "CVE-2017-5664"
        ],
        "CWE": [
          "CWE-254"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T11:32:22.954570Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2017-10-09T15:29:34Z",
      "references": [
        {
          "title": "Bugzilla redhat",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id&%23x3D%3B1459158"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2017-5664"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.78)",
          "[8.0.0RC1,8.0.44)",
          "[8.5.0,8.5.15)",
          "[9.0.0.M1,9.0.0.M21)"
        ]
      },
      "severity": "high",
      "title": "Access Restriction Bypass",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.7.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.7.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.15"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T11:39:38.758541Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nThe refactoring of the Connector code for 8.5.x onwards introduced a regression in the error handling of the send file code for the NIO HTTP connector. An error during send file processing resulted in the current Processor object being added to the Processor cache multiple times. This in turn meant that the same Processor could be used for concurrent requests. Sharing a Processor can result in information leakage between requests including, not not limited to, session ID and the response body.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.74, 8.5.9, 8.0.40, 9.0.0M15 or higher.\n\n\n## References\n\n- [Seclist](http://seclists.org/bugtraq/2016/Dec/15)\n",
      "disclosureTime": "2016-12-13T04:53:40Z",
      "fixedIn": [
        "7.0.74",
        "8.5.9",
        "8.0.40",
        "9.0.0M15"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451521",
      "identifiers": {
        "CVE": [
          "CVE-2016-8745"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T11:39:38.758567Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-12-13T04:53:40Z",
      "references": [
        {
          "title": "Seclist",
          "url": "http://seclists.org/bugtraq/2016/Dec/15"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7,7.0.74)",
          "[8.5.0,8.5.9)",
          "[8.0.0RC1,8.0.40)",
          "[9.0.0M1,9.0.0M15)"
        ]
      },
      "severity": "high",
      "title": "Information Exposure",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.4.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.4.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.11"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:L/E:P/RL:O/RC:R",
      "alternativeIds": [],
      "creationTime": "2019-07-04T12:00:23.840040Z",
      "credit": [
        "Regis Leroy"
      ],
      "cvssScore": 7.1,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Information Exposure.\nThe code that parsed the HTTP request line permitted invalid characters. This could be exploited, in conjunction with a proxy that also permitted the invalid characters but with a different interpretation, to inject data into the HTTP response. By manipulating the HTTP response the attacker could poison a web-cache, perform an XSS attack and/or obtain sensitive information from requests other then their own.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 6.0.48, 7.0.73, 8.0.39, 8.5.8, 9.0.0.M13 or higher.\n\n\n## References\n\n- [Exploit - ExploitDB](https://www.exploit-db.com/exploits/41783)\n\n- [OSS Security](http://www.openwall.com/lists/oss-security/2016/11/22/17)\n",
      "disclosureTime": "2016-11-23T07:08:48Z",
      "fixedIn": [
        "6.0.48",
        "7.0.73",
        "8.0.39",
        "8.5.8",
        "9.0.0.M13"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451526",
      "identifiers": {
        "CVE": [
          "CVE-2016-6816"
        ],
        "CWE": [
          "CWE-200"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T12:00:23.840064Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-11-23T07:08:48Z",
      "references": [
        {
          "title": "Exploit - ExploitDB",
          "url": "https://www.exploit-db.com/exploits/41783"
        },
        {
          "title": "OSS Security",
          "url": "http://www.openwall.com/lists/oss-security/2016/11/22/17"
        }
      ],
      "semver": {
        "vulnerable": [
          "[6.0.0, 6.0.48)",
          "[7.0.0,7.0.73)",
          "[8,8.0.39)",
          "[8.5.0,8.5.8)",
          "[9-alpha,9.0.0.M13)"
        ]
      },
      "severity": "high",
      "title": "Information Exposure",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.4.4.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.4.4.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.5.11"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T12:03:49.472621Z",
      "credit": [
        "the Apache Tomcat Security Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Access Restriction Bypass.\nIt was discovered that it was possible for a web application to access any global JNDI resource whether an explicit ResourceLink had been configured or not.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.72, 8.0.37, 8.5.5, 9.0.0.M10 or higher.\n\n\n## References\n\n- [OSS Security](http://seclists.org/oss-sec/2016/q4/257)\n",
      "disclosureTime": "2016-10-28T09:40:07Z",
      "fixedIn": [
        "7.0.72",
        "8.0.37",
        "8.5.5",
        "9.0.0.M10"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451527",
      "identifiers": {
        "CVE": [
          "CVE-2016-6797"
        ],
        "CWE": [
          "CWE-284"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T12:03:57.566060Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-10-28T09:40:07Z",
      "references": [
        {
          "title": "OSS Security",
          "url": "http://seclists.org/oss-sec/2016/q4/257"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.72)",
          "[8,8.0.37)",
          "[8.5.0,8.5.5)",
          "[9-alpha,9.0.0.M10)"
        ]
      },
      "severity": "high",
      "title": "Access Restriction Bypass",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.8.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.8.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.37"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2019-07-04T12:10:54.745990Z",
      "credit": [
        "TERASOLUNA Framework Development Team"
      ],
      "cvssScore": 7.5,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nIt allows remote attackers to cause a denial of service (CPU consumption) via a long boundary string.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.70, 8.0.36, 8.5.3, 9.0.0.M7 or higher.\n\n\n## References\n\n- [Apache Mail Archive](http://mail-archives.us.apache.org/mod_mbox/www-announce/201606.mbox/%3C6223ece6-2b41-ef4f-22f9-d3481e492832@apache.org%3E)\n\n- [Apache-SVN](http://svn.apache.org/viewvc/commons/proper/fileupload/trunk/RELEASE-NOTES.txt?r1=1745717&r2=1749637&diff_format=h)\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/show_bug.cgi?id=1349475)\n",
      "disclosureTime": "2016-12-25T16:51:56Z",
      "fixedIn": [
        "7.0.70",
        "8.0.36",
        "8.5.3",
        "9.0.0.M7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451531",
      "identifiers": {
        "CVE": [
          "CVE-2016-3092"
        ],
        "CWE": [
          "CWE-20"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T12:10:54.746020Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-12-25T16:51:56Z",
      "references": [
        {
          "title": "Apache Mail Archive",
          "url": "http://mail-archives.us.apache.org/mod_mbox/www-announce/201606.mbox/%3C6223ece6-2b41-ef4f-22f9-d3481e492832@apache.org%3E"
        },
        {
          "title": "Apache-SVN",
          "url": "http://svn.apache.org/viewvc/commons/proper/fileupload/trunk/RELEASE-NOTES.txt?r1=1745717&r2=1749637&diff_format=h"
        },
        {
          "title": "Redhat Bugzilla",
          "url": "https://bugzilla.redhat.com/show_bug.cgi?id=1349475"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.70)",
          "[8.0,8.0.36)",
          "[8.5.0,8.5.3)",
          "[9-alpha,9.0.0.M7)"
        ]
      },
      "severity": "high",
      "title": "Denial of Service (DoS)",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.6.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.3.6.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.36"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2019-07-04T12:26:42.227279Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 4.3,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to Directory Traversal.\nIt allows remote authenticated users to bypass intended SecurityManager restrictions and list a parent directory via a /.. (slash dot dot) in a pathname used by a web application in a getResource, getResourceAsStream, or getResourcePaths call, as demonstrated by the $CATALINA_BASE/webapps directory.\n\n## Details\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.65, 8.0.27 or higher.\n\n\n## References\n\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5174)\n",
      "disclosureTime": "2016-02-22T14:06:20Z",
      "fixedIn": [
        "7.0.65",
        "8.0.27"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451532",
      "identifiers": {
        "CVE": [
          "CVE-2015-5174"
        ],
        "CWE": [
          "CWE-22"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T12:33:08.708637Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2016-02-22T14:06:20Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5174"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.65)",
          "[8,8.0.27)"
        ]
      },
      "severity": "medium",
      "title": "Directory Traversal",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.2.7.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.2.7.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@8.0.28"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:L",
      "alternativeIds": [],
      "creationTime": "2019-07-04T12:35:21.138740Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 6.5,
      "description": "## Overview\n\n[org.apache.tomcat.embed:tomcat-embed-core](https://mvnrepository.com/artifact/org.apache.tomcat.embed/tomcat-embed-core) is a Core Tomcat implementation.\n\n\nAffected versions of this package are vulnerable to HTTP Request Smuggling.\nIt does not properly handle attempts to continue reading data after an error has occurred, which allows remote attackers to conduct HTTP request smuggling attacks or cause a denial of service (resource consumption) by streaming data with malformed chunked transfer coding.\n\n## Remediation\n\nUpgrade `org.apache.tomcat.embed:tomcat-embed-core` to version 7.0.55, 8.0.9 or higher.\n\n\n## References\n\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0227)\n",
      "disclosureTime": "2015-02-16T20:49:36Z",
      "fixedIn": [
        "7.0.55",
        "8.0.9"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-451533",
      "identifiers": {
        "CVE": [
          "CVE-2014-0227"
        ],
        "CWE": [
          "CWE-19"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-core",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-07-04T12:35:21.138789Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-core",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-core",
      "patches": [],
      "publicationTime": "2015-02-16T20:49:36Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-0227"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7.0.0,7.0.55)",
          "[8,8.0.9)"
        ]
      },
      "severity": "medium",
      "title": "HTTP Request Smuggling",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.6.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.6.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-core@7.0.55"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-core",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2017-02-22T07:28:26.824000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n[`org.apache.tomcat.embed:tomcat-embed-el`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22tomcat-embed-el%22)\nThe Expression Language (EL) implementation in Apache Tomcat 6.x before 6.0.44, 7.x before 7.0.58, and 8.x before 8.0.16 does not properly consider the possibility of an accessible interface implemented by an inaccessible class, which allows attackers to bypass a SecurityManager protection mechanism via a web application that leverages use of incorrect privileges during EL evaluation.\n\n## References\n- [NVD](https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-7810)\n",
      "disclosureTime": "2015-05-14T21:09:38Z",
      "fixedIn": [
        "7.0.58",
        "8.0.16"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGAPACHETOMCATEMBED-30991",
      "identifiers": {
        "CVE": [
          "CVE-2014-7810"
        ],
        "CWE": [
          "CWE-284"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "tomcat-embed-el",
        "groupId": "org.apache.tomcat.embed"
      },
      "modificationTime": "2019-06-02T10:21:36.859154Z",
      "moduleName": "org.apache.tomcat.embed:tomcat-embed-el",
      "packageManager": "maven",
      "packageName": "org.apache.tomcat.embed:tomcat-embed-el",
      "patches": [],
      "publicationTime": "2015-05-14T21:09:38Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2014-7810"
        }
      ],
      "semver": {
        "vulnerable": [
          "[7,7.0.58),[8,8.0.16)"
        ]
      },
      "severity": "medium",
      "title": "Improper Access Control",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.1.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-el@7.0.54"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.11.RELEASE",
        "org.springframework.boot:spring-boot-starter-tomcat@1.1.11.RELEASE",
        "org.apache.tomcat.embed:tomcat-embed-el@7.0.59"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.apache.tomcat.embed:tomcat-embed-el",
      "version": "7.0.54"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N",
      "alternativeIds": [],
      "creationTime": "2016-12-25T16:51:53Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\n\n[org.hibernate:hibernate-validator](https://mvnrepository.com/artifact/org.hibernate/hibernate-validator) is a Hibernate Validator Engine Relocation Artifact.\n\n\nAffected versions of this package are vulnerable to JSM bypass via ReflectionHelper.\nReflectionHelper (`org.hibernate.validator.util.ReflectionHelper`) in Hibernate Validator 4.1.0 before 4.2.1, 4.3.x before 4.3.2, and 5.x before 5.1.2 allows attackers to bypass Java Security Manager (JSM) restrictions and execute restricted reflection calls via a crafted application.\n\n## Remediation\n\nUpgrade `org.hibernate:hibernate-validator` to version 4.3.2.Final, 5.2.1.Final or higher.\n\n\n## References\n\n- [Jira Issue](https://hibernate.atlassian.net/browse/HV-912)\n\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2014-3558)\n",
      "disclosureTime": "2014-07-17T16:51:53Z",
      "fixedIn": [
        "4.3.2.Final",
        "5.2.1.Final"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGHIBERNATE-30098",
      "identifiers": {
        "CVE": [
          "CVE-2014-3558"
        ],
        "CWE": [
          "CWE-592"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "hibernate-validator",
        "groupId": "org.hibernate"
      },
      "modificationTime": "2019-06-26T13:16:27.533051Z",
      "moduleName": "org.hibernate:hibernate-validator",
      "packageManager": "maven",
      "packageName": "org.hibernate:hibernate-validator",
      "patches": [],
      "publicationTime": "2014-07-17T16:51:53Z",
      "references": [
        {
          "title": "Jira Issue",
          "url": "https://hibernate.atlassian.net/browse/HV-912"
        },
        {
          "title": "Redhat Bugzilla",
          "url": "https://bugzilla.redhat.com/CVE-2014-3558"
        }
      ],
      "semver": {
        "vulnerable": [
          "[4.1.0.Beta1, 4.3.2.Final)",
          "[5.0.0.Final,5.2.1.Final)"
        ]
      },
      "severity": "medium",
      "title": "JSM bypass via ReflectionHelper",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.hibernate:hibernate-validator@5.0.3.Final"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.3.0.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.hibernate:hibernate-validator",
      "version": "5.0.3.Final"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H",
      "alternativeIds": [],
      "creationTime": "2016-12-25T16:51:55Z",
      "credit": [
        "Toshiaki Maki"
      ],
      "cvssScore": 5.5,
      "description": "## Overview\n\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\n\nAffected versions of this package are vulnerable to Denial of Service (DoS).\nIt does not properly process inline DTD declarations when DTD is not entirely disabled, which allows remote attackers to cause a denial of service (memory consumption and out-of-memory errors) via a crafted XML file.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its intended and legitimate users.\r\n\r\nUnlike other vulnerabilities, DoS attacks usually do not aim at breaching security. Rather, they are focused on making websites and services unavailable to genuine users resulting in downtime.\r\n\r\nOne popular Denial of Service vulnerability is DDoS (a Distributed Denial of Service), an attack that attempts to clog network pipes to the system by generating a large volume of traffic from many machines.\r\n\r\nWhen it comes to open source libraries, DoS vulnerabilities allow attackers to trigger such a crash or crippling of the service by using a flaw either in the application code or from the use of open source libraries.\r\n\r\nTwo common types of DoS vulnerabilities:\r\n\r\n* High CPU/Memory Consumption- An attacker sending crafted requests that could cause the system to take a disproportionate amount of time to process. For example, [commons-fileupload:commons-fileupload](SNYK-JAVA-COMMONSFILEUPLOAD-30082).\r\n\r\n* Crash - An attacker sending crafted requests that could cause the system to crash. For Example,  [npm `ws` package](npm:ws:20171108)\n\n## Remediation\n\nUpgrade `org.springframework:spring-web` to version 3.2.14, 4.1.7 or higher.\n\n\n## References\n\n- [Pivotal Security](http://pivotal.io/security/cve-2015-3192)\n",
      "disclosureTime": "2016-12-25T16:51:55Z",
      "fixedIn": [
        "3.2.14",
        "4.1.7"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-30164",
      "identifiers": {
        "CVE": [
          "CVE-2015-3192"
        ],
        "CWE": [
          "CWE-119"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "spring-web",
        "groupId": "org.springframework"
      },
      "modificationTime": "2019-06-06T14:36:37.047811Z",
      "moduleName": "org.springframework:spring-web",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-web",
      "patches": [],
      "publicationTime": "2016-12-25T16:51:55Z",
      "references": [
        {
          "title": "Pivotal Security",
          "url": "http://pivotal.io/security/cve-2015-3192"
        }
      ],
      "semver": {
        "vulnerable": [
          "[3.2, 3.2.14)",
          "[4, 4.1.7)"
        ]
      },
      "severity": "medium",
      "title": "Denial of Service (DoS)",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework:spring-web@4.0.5.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-web",
      "version": "4.0.5.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2016-12-25T16:51:56Z",
      "credit": [
        "Alvaro Muñoz"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\n\n[org.springframework:spring-web](https://github.com/spring-projects/spring-framework) provides a comprehensive programming and configuration model for modern Java-based enterprise applications - on any kind of deployment platform.\n\n\nAffected versions of this package are vulnerable to Reflected File Download\nvia a crafted URL with a batch script extension, resulting in the response being downloaded rather than rendered.\n\n## Remediation\n\nUpgrade `org.springframework:spring-web` to version 3.2.15, 4.1.18, 4.2.2 or higher.\n\n\n## References\n\n- [Oren Hafif Blog](https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/)\n\n- [Pivotal Security](http://pivotal.io/security/cve-2015-5211)\n\n- [Redhat Bugzilla](https://access.redhat.com/security/cve/cve-2015-5211)\n",
      "disclosureTime": "2016-12-25T16:51:56Z",
      "fixedIn": [
        "3.2.15",
        "4.1.18",
        "4.2.2"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-30165",
      "identifiers": {
        "CVE": [
          "CVE-2015-5211"
        ],
        "CWE": [
          "CWE-494"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "spring-web",
        "groupId": "org.springframework"
      },
      "modificationTime": "2019-06-06T14:34:26.196354Z",
      "moduleName": "org.springframework:spring-web",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-web",
      "patches": [],
      "publicationTime": "2016-12-25T16:51:56Z",
      "references": [
        {
          "title": "Oren Hafif Blog",
          "url": "https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/"
        },
        {
          "title": "Pivotal Security",
          "url": "http://pivotal.io/security/cve-2015-5211"
        },
        {
          "title": "Redhat Bugzilla",
          "url": "https://access.redhat.com/security/cve/cve-2015-5211"
        }
      ],
      "semver": {
        "vulnerable": [
          "[3.2, 3.2.15)",
          "[4.0, 4.1.18)",
          "[4.2, 4.2.2)"
        ]
      },
      "severity": "high",
      "title": "Reflected File Download",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework:spring-web@4.0.5.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-web",
      "version": "4.0.5.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2016-12-25T16:51:53Z",
      "credit": [
        "Toshiaki Maki"
      ],
      "cvssScore": 5.3,
      "description": "## Overview\r\n[`org.springframework:spring-webmvc`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22)\r\nDirectory traversal vulnerability in Pivotal Spring Framework 3.0.4 through 3.2.x before 3.2.12, 4.0.x before 4.0.8, and 4.1.x before 4.1.2 allows remote attackers to read arbitrary files via unspecified vectors, related to static resource handling.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## References\r\n- [Pivotal Security](http://www.pivotal.io/security/cve-2014-3625)\r\n- [Redhat Bugzilla](https://bugzilla.redhat.com/CVE-2014-3625)\r\n- [Jira Issue](https://jira.spring.io/browse/SPR-12354)",
      "disclosureTime": "2016-12-25T16:51:53Z",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-30169",
      "identifiers": {
        "CVE": [
          "CVE-2014-3625"
        ],
        "CWE": [
          "CWE-22"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "spring-webmvc",
        "groupId": "org.springframework"
      },
      "modificationTime": "2018-12-10T11:52:27.889906Z",
      "moduleName": "org.springframework:spring-webmvc",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-webmvc",
      "patches": [],
      "publicationTime": "2016-12-25T16:51:53Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/9beae9ae4226c45cd428035dae81214439324676"
        },
        {
          "title": "GitHub Commit 1",
          "url": "https://github.com/spring-projects/spring-framework/commit/9cef8e3001ddd61c734281a7556efd84b6cc2755"
        },
        {
          "title": "GitHub Commit 2",
          "url": "https://github.com/spring-projects/spring-framework/commit/3f68cd633f03370d33c2603a6496e81273782601"
        },
        {
          "title": "Jira Issue",
          "url": "https://jira.spring.io/browse/SPR-12354"
        },
        {
          "title": "Pivotal Security",
          "url": "http://www.pivotal.io/security/cve-2014-3625"
        },
        {
          "title": "Redhat Bugzilla",
          "url": "https://bugzilla.redhat.com/CVE-2014-3625"
        }
      ],
      "semver": {
        "vulnerable": [
          "[3.2,3.2.11.RELEASE]",
          "[4.0,4.0.7.RELEASE]",
          "[4.1,4.1.1.RELEASE]"
        ]
      },
      "severity": "medium",
      "title": "Directory Traversal",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework:spring-webmvc@4.0.5.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-webmvc",
      "version": "4.0.5.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:C/C:H/I:H/A:H",
      "alternativeIds": [],
      "creationTime": "2016-12-25T16:51:56Z",
      "credit": [
        "Alvaro Muñoz"
      ],
      "cvssScore": 8.6,
      "description": "## Overview\r\n[`org.springframework:spring-webmvc`](http://search.maven.org/#search%7Cga%7C1%7Ca%3A%22spring-webmvc%22)\r\nSpring Framework is vulnerable to Reflected File Download (RFD) attacks via a crafted URL with a batch script extension, resulting in the response being downloaded rather than rendered.\r\n\r\n## References\r\n- [Pivotal Security](http://pivotal.io/security/cve-2015-5211)\r\n- [Oren Hafif Blog](https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/)",
      "disclosureTime": "2016-12-25T16:51:56Z",
      "fixedIn": [],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-30170",
      "identifiers": {
        "CVE": [
          "CVE-2015-5211"
        ],
        "CWE": [
          "CWE-494"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "spring-webmvc",
        "groupId": "org.springframework"
      },
      "modificationTime": "2018-12-06T11:52:20.762565Z",
      "moduleName": "org.springframework:spring-webmvc",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-webmvc",
      "patches": [],
      "publicationTime": "2016-12-25T16:51:56Z",
      "references": [
        {
          "title": "Oren Hafif Blog",
          "url": "https://www.trustwave.com/Resources/SpiderLabs-Blog/Reflected-File-Download---A-New-Web-Attack-Vector/"
        },
        {
          "title": "Pivotal Security",
          "url": "http://pivotal.io/security/cve-2015-5211"
        }
      ],
      "semver": {
        "vulnerable": [
          "[4.2,4.2.1.RELEASE]",
          "[4.1,4.1.7.RELEASE]",
          "[4.0,4.0.9.RELEASE]",
          "[3.2,3.2.14.RELEASE]"
        ]
      },
      "severity": "high",
      "title": "Reflected File Download",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework:spring-webmvc@4.0.5.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-webmvc",
      "version": "4.0.5.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:L/UI:N/S:U/C:H/I:N/A:L",
      "alternativeIds": [],
      "creationTime": "2018-04-09T10:37:27.476000Z",
      "credit": [
        "Unknown"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\r\n[org.springframework:spring-webmvc](https://mvnrepository.com/artifact/org.springframework/spring-webmvc) Spring provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\r\n\r\nAffected versions of this package are vulnerable to Multipart Content Pollution. It provides client-side support for multipart requests. When the server application (server A) receives input from a remote client, and then uses that input to make a multipart request to another server (server B), it can be exposed to an attack, where an extra multipart is inserted in the content of the request from server A, causing server B to use the wrong value for a part it expects. This could to lead privilege escalation, for example, if the part content represents a username or user roles.\r\n\r\n## Remediation\r\nUpgrade `org.springframework:spring-webmvc` to version 4.3.14, 5.0.5 or higher.\r\n\r\n## References\r\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2018-1272)\r\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-1272)",
      "disclosureTime": "2018-04-09T10:37:27Z",
      "fixedIn": [
        "4.3.14",
        "5.0.5"
      ],
      "functions": [],
      "functions_new": [],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-32199",
      "identifiers": {
        "CVE": [
          "CVE-2018-1272"
        ],
        "CWE": [
          "CWE-94"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "spring-webmvc",
        "groupId": "org.springframework"
      },
      "modificationTime": "2019-06-02T10:30:13.258248Z",
      "moduleName": "org.springframework:spring-webmvc",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-webmvc",
      "patches": [],
      "publicationTime": "2018-04-09T15:17:27Z",
      "references": [
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-1272"
        },
        {
          "title": "Pivotal Security Advisory",
          "url": "https://pivotal.io/security/cve-2018-1272"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,4.3.14), [5.0.0,5.0.5)"
        ]
      },
      "severity": "medium",
      "title": "Multipart Content Pollution",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework:spring-webmvc@4.0.5.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-webmvc",
      "version": "4.0.5.RELEASE"
    },
    {
      "CVSSv3": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N",
      "alternativeIds": [],
      "creationTime": "2018-04-09T10:37:27.442000Z",
      "credit": [
        "Orange Tsai"
      ],
      "cvssScore": 5.9,
      "description": "## Overview\r\n[org.springframework:spring-webmvc](https://mvnrepository.com/artifact/org.springframework/spring-webmvc) Spring provides everything you need beyond the Java language to create enterprise applications in a wide range of scenarios and architectures.\r\n\r\nAffected versions of this package are vulnerable to Directory Traversal. When static resources are served from a file system on Windows (as opposed to the classpath, or the ServletContext), a malicious user can send a request using a specially crafted URL that can lead a directory traversal attack.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade `org.springframework:spring-webmvc` to version 4.3.15, 5.0.5 or higher.\r\n\r\n## References\r\n- [Pivotal Security Advisory](https://pivotal.io/security/cve-2018-1271)\r\n- [NVD](https://nvd.nist.gov/vuln/detail/CVE-2018-1271)",
      "disclosureTime": "2018-04-06T10:37:27Z",
      "fixedIn": [
        "4.3.15",
        "5.0.5"
      ],
      "functions": [
        {
          "functionId": {
            "className": "ResourceHttpRequestHandler",
            "filePath": "org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java",
            "functionName": "isInvalidPath"
          },
          "version": [
            "[4.3.0,4.3.15)",
            "[5.0.0,5.0.5)"
          ]
        }
      ],
      "functions_new": [
        {
          "functionId": {
            "className": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler",
            "functionName": "isInvalidPath"
          },
          "version": [
            "[4.3.0,4.3.15)",
            "[5.0.0,5.0.5)"
          ]
        }
      ],
      "id": "SNYK-JAVA-ORGSPRINGFRAMEWORK-32202",
      "identifiers": {
        "CVE": [
          "CVE-2018-1271"
        ],
        "CWE": [
          "CWE-23"
        ]
      },
      "language": "java",
      "mavenModuleName": {
        "artifactId": "spring-webmvc",
        "groupId": "org.springframework"
      },
      "modificationTime": "2019-05-02T11:53:58.665933Z",
      "moduleName": "org.springframework:spring-webmvc",
      "packageManager": "maven",
      "packageName": "org.springframework:spring-webmvc",
      "patches": [],
      "publicationTime": "2018-04-09T15:17:27Z",
      "references": [
        {
          "title": "GitHub Commit",
          "url": "https://github.com/spring-projects/spring-framework/commit/91b803a2310344d925e5d4b1709bbcea9037554"
        },
        {
          "title": "NVD",
          "url": "https://nvd.nist.gov/vuln/detail/CVE-2018-1271"
        },
        {
          "title": "Pivotal Security Advisory",
          "url": "https://pivotal.io/security/cve-2018-1271"
        }
      ],
      "semver": {
        "vulnerable": [
          "[,4.3.15)",
          "[5.0.0,5.0.5)"
        ]
      },
      "severity": "medium",
      "title": "Directory Traversal",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework:spring-webmvc@4.0.5.RELEASE"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.springframework:spring-webmvc",
      "version": "4.0.5.RELEASE"
    },
    {
      "license": "(EPL-1.0 OR LGPL-2.0)",
      "semver": {
        "vulnerable": [
          "[0.9.18,)"
        ]
      },
      "id": "snyk:lic:maven:ch.qos.logback:logback-core:(EPL-1.0_OR_LGPL-2.0)",
      "type": "license",
      "packageManager": "maven",
      "language": "java",
      "packageName": "ch.qos.logback:logback-core",
      "title": "Dual license: EPL-1.0, LGPL-2.0",
      "description": "Dual license: EPL-1.0, LGPL-2.0",
      "publicationTime": "2019-07-30T06:43:06.293Z",
      "creationTime": "2019-07-30T06:43:06.293Z",
      "licenseTemplateUrl": [
        "https://raw.githubusercontent.com/spdx/license-list/master/EPL-1.0.txt",
        "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.0.txt"
      ],
      "severity": "medium",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter@1.1.1.RELEASE",
        "org.springframework.boot:spring-boot-starter-logging@1.1.1.RELEASE",
        "ch.qos.logback:logback-classic@1.1.2",
        "ch.qos.logback:logback-core@1.1.2"
      ],
      "upgradePath": [],
      "isUpgradable": false,
      "isPatchable": false,
      "name": "ch.qos.logback:logback-core",
      "version": "1.1.2"
    },
    {
      "license": "LGPL-2.1",
      "semver": {
        "vulnerable": [
          "[3.0.1.GA, 3.1.2.GA)"
        ]
      },
      "id": "snyk:lic:maven:org.jboss.logging:jboss-logging:LGPL-2.1",
      "type": "license",
      "packageManager": "maven",
      "language": "java",
      "packageName": "org.jboss.logging:jboss-logging",
      "title": "LGPL-2.1 license",
      "description": "LGPL-2.1 license",
      "publicationTime": "2019-07-30T11:26:32.073Z",
      "creationTime": "2019-07-30T11:26:32.073Z",
      "licenseTemplateUrl": "https://raw.githubusercontent.com/spdx/license-list/master/LGPL-2.1.txt",
      "severity": "medium",
      "from": [
        "com.overstock:ostk-base-pom@1.0.0-SNAPSHOT",
        "org.springframework.boot:spring-boot-starter-web@1.1.1.RELEASE",
        "org.hibernate:hibernate-validator@5.0.3.Final",
        "org.jboss.logging:jboss-logging@3.1.1.GA"
      ],
      "upgradePath": [
        false,
        "org.springframework.boot:spring-boot-starter-web@1.2.0.RELEASE",
        "org.hibernate:hibernate-validator@5.1.3.Final",
        "org.jboss.logging:jboss-logging@3.1.3.GA"
      ],
      "isUpgradable": true,
      "isPatchable": false,
      "name": "org.jboss.logging:jboss-logging",
      "version": "3.1.1.GA"
    }
  ],
  "ok": false,
  "dependencyCount": 31,
  "org": "overstock",
  "policy": "# Snyk (https://snyk.io) policy file, patches or ignores known vulnerabilities.\nversion: v1.13.5\nignore: {}\npatch: {}\n",
  "isPrivate": true,
  "licensesPolicy": {
    "severities": {
      "MS-RL": "medium",
      "EPL-1.0": "medium",
      "GPL-2.0": "high",
      "GPL-3.0": "high",
      "MPL-1.1": "medium",
      "MPL-2.0": "medium",
      "AGPL-1.0": "high",
      "AGPL-3.0": "high",
      "CDDL-1.0": "medium",
      "LGPL-2.0": "medium",
      "LGPL-2.1": "medium",
      "LGPL-3.0": "medium",
      "CPOL-1.02": "high",
      "LGPL-2.1+": "medium",
      "LGPL-3.0+": "medium",
      "SimPL-2.0": "high",
      "Artistic-1.0": "medium",
      "Artistic-2.0": "medium"
    }
  },
  "packageManager": "maven",
  "ignoreSettings": null,
  "summary": "52 vulnerable dependency paths",
  "filesystemPolicy": false,
  "filtered": {
    "ignore": [],
    "patch": []
  },
  "uniqueCount": 52,
  "path": "/mnt/c/Users/siwilkins/gitProjects/appsec_test/maven-dependency-test"
}
